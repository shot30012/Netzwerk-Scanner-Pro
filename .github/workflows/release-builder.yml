name: Baue Windows & macOS Version

on:
  release:
    types: [published]

jobs:
  build:
    permissions:
      contents: write

    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      # 1. Code herunterladen
      - name: Lade den Quellcode herunter
        uses: actions/checkout@v4

      # 2. Python einrichten
      - name: Installiere Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. Python-Pakete installieren
      - name: Installiere Python-Pakete
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Windows: Benötigte Werkzeuge mit Chocolatey installieren
      - name: Windows-spezifische Vorbereitungen
        if: runner.os == 'Windows'
        run: |
          # Installiere Inno Setup UND Nmap mit einem einzigen, sauberen Befehl.
          # Chocolatey kümmert sich um den Download, die Installation und den Pfad.
          choco install innosetup nmap -y
          
          # Wir müssen die Nmap-Dateien immer noch für unseren Installer kopieren.
          # Choco installiert Nmap standardmäßig nach C:\Program Files (x86)\Nmap oder C:\ProgramData\chocolatey\lib\nmap\tools
          # Wir suchen nach dem Installationspfad.
          $NMAP_PATH = (Get-Command nmap).Source | Split-Path
          if (-not $NMAP_PATH) {
            echo "FEHLER: Nmap wurde von Chocolatey nicht gefunden."
            exit 1
          }
          echo "Nmap gefunden in: $NMAP_PATH"

          New-Item -ItemType Directory -Force -Path "dependencies/nmap_unpacked"
          echo "Kopiere installierte Nmap-Dateien..."
          Copy-Item -Path "$NMAP_PATH\*" -Destination "dependencies\nmap_unpacked" -Recurse
        shell: pwsh
      # 5. macOS: Nmap installieren
      - name: macOS-spezifische Vorbereitungen
        if: runner.os == 'macOS'
        run: brew install nmap

      # 6. Anwendung mit PyInstaller bauen
      - name: Führe das PyInstaller Build-Skript aus
        run: python main.py --build

      # 7. Windows Installer mit Inno Setup erstellen
      - name: Erstelle Windows Installer
        if: runner.os == 'Windows'
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\iscc.exe" "setup.iss"
        shell: pwsh

       # 8. Ergebnis verpacken und Outputs festlegen
      - name: Ergebnis verpacken und Outputs festlegen
        id: package
        run: |
          if ("${{ runner.os }}" -eq "Windows") {
            $SOURCE_PATH = "Output/Netzwerk-Scanner-Pro-Setup.exe"
            $FINAL_NAME = "Netzwerk-Scanner-Pro-Windows-Setup.exe"
            # Benenne die Datei um, damit sie einen besseren Namen im Release hat
            mv $SOURCE_PATH "Output/$FINAL_NAME"
            echo "ASSET_PATH=Output/$FINAL_NAME" >> $env:GITHUB_OUTPUT
          }
          else {
            $ASSET_NAME = "Netzwerk-Scanner-Pro-macOS.zip"
            cd dist
            zip -r ../$ASSET_NAME "Netzwerk-Scanner Pro.app"
            cd ..
            echo "ASSET_PATH=$ASSET_NAME" >> $env:GITHUB_OUTPUT
          }
        shell: pwsh
      # 9. Fertiges Paket zum Release hochladen
            # 9. Fertiges Paket zum Release hochladen
      - name: Lade fertiges Paket hoch (via GitHub CLI)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} ${{ steps.package.outputs.ASSET_PATH }} --clobber

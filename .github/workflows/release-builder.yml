# Der Name unseres Bauplans
name: Baue Windows & macOS Version

# WANN soll der Roboter starten?
# Immer dann, wenn wir eine neue "Release" auf GitHub veröffentlichen.
on:
  release:
    types: [published]

# WAS soll der Roboter tun?
jobs:
  # Ein Job namens "build"
  build:
    # Dieser Job soll auf ZWEI verschiedenen Werkbänken laufen:
    # einmal auf einer Windows-Werkbank, einmal auf einer Mac-Werkbank.
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    # Hier startet die eigentliche Arbeit für JEDE Werkbank
    runs-on: ${{ matrix.os }}

    steps:
      # 1. Schritt: Hole den Code
      - name: Lade den Quellcode herunter
        uses: actions/checkout@v4

      # 2. Schritt: Richte die Python-Werkstatt ein
      - name: Installiere Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. Schritt: Installiere die Python-Werkzeuge von der Einkaufsliste
      - name: Installiere Python-Pakete
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Schritt: Installiere Nmap (nur auf der Mac-Werkbank)
      # Auf Windows gehen wir davon aus, dass der Benutzer es mit unserem Installer bekommt.
      - name: Installiere Nmap (nur für macOS)
        if: runner.os == 'macOS'
        run: brew install nmap

      # 5. Schritt: Baue das eigentliche Programm zusammen
      - name: Führe das Build-Skript aus
        run: python main.py --build

      # 6. Schritt: Verpacke das Ergebnis schön
      - name: Ergebnis verpacken
        id: package
        run: |
          # Wenn wir auf der Windows-Werkbank sind...
          if ("${{ runner.os }}" -eq "Windows") {
            $ARTIFACT_PATH = "dist/Netzwerk-Scanner-Pro.exe"
            $ASSET_NAME = "Netzwerk-Scanner-Pro-Windows.exe"
            # Benenne die Datei um, damit klar ist, dass sie für Windows ist
            mv $ARTIFACT_PATH dist/$ASSET_NAME
            # Sag dem nächsten Schritt den neuen Namen
            echo "ASSET_PATH=dist/$ASSET_NAME" >> $env:GITHUB_ENV
            echo "ASSET_NAME=$ASSET_NAME" >> $env:GITHUB_ENV
          }
          # Wenn wir auf der Mac-Werkbank sind...
          else {
            $ARTIFACT_PATH = "dist/Netzwerk-Scanner Pro.app"
            $ASSET_NAME = "Netzwerk-Scanner-Pro-macOS.zip"
            # Wir packen die .app in eine ZIP-Datei, weil man Ordner nicht direkt hochladen kann
            cd dist
            zip -r ../$ASSET_NAME "Netzwerk-Scanner Pro.app"
            cd ..
            # Sag dem nächsten Schritt den neuen Namen
            echo "ASSET_PATH=$ASSET_NAME" >> $env:GITHUB_ENV
            echo "ASSET_NAME=$ASSET_NAME" >> $env:GITHUB_ENV
          }
        shell: pwsh # Wir verwenden PowerShell für beide Systeme, das macht es einfacher

      # 7. Schritt: Lade das fertige Paket zur Release-Seite hoch
      - name: Lade fertiges Paket hoch
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}

name: Baue Windows & macOS Version

on:
  release:
    types: [published]

jobs:
  build:
    permissions:
      contents: write

    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      # 1. Code herunterladen
      - name: Lade den Quellcode herunter
        uses: actions/checkout@v4

      # 2. Python einrichten
      - name: Installiere Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. Python-Pakete installieren
      - name: Installiere Python-Pakete
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Betriebssystem-spezifische Vorbereitungen
      - name: Windows-spezifische Vorbereitungen (Inno Setup)
        if: runner.os == 'Windows'
        run: choco install innosetup --version=6.2.2 -y
        shell: pwsh

      - name: macOS-spezifische Vorbereitungen (Nmap)
        if: runner.os == 'macOS'
        run: brew install nmap

      # 5. Anwendung mit PyInstaller bauen
      - name: Führe das PyInstaller Build-Skript aus
        run: python main.py --build

      # 6. Windows Installer mit Inno Setup erstellen
      - name: Erstelle Windows Installer
        if: runner.os == 'Windows'
        run: |
          # Der Pfad zum Inno Setup Compiler
          & "C:\Program Files (x86)\Inno Setup 6\iscc.exe" "setup.iss"
        shell: pwsh

      # 7. Ergebnis verpacken und Outputs festlegen
      - name: Ergebnis verpacken und Outputs festlegen
        id: package
        run: |
          if ("${{ runner.os }}" -eq "Windows") {
            # Der Pfad zur fertigen Installer-Datei
            echo "ASSET_PATH=Output/Netzwerk-Scanner-Pro-Setup.exe" >> $env:GITHUB_OUTPUT
            # Der Name, den die Datei im Release haben soll
            echo "ASSET_NAME=Netzwerk-Scanner-Pro-Windows-Setup.exe" >> $env:GITHUB_OUTPUT
          }
          else {
            # Für macOS bleibt es bei der ZIP-Datei der .app
            $ASSET_NAME = "Netzwerk-Scanner-Pro-macOS.zip"
            cd dist
            zip -r ../$ASSET_NAME "Netzwerk-Scanner Pro.app"
            cd ..
            echo "ASSET_PATH=$ASSET_NAME" >> $env:GITHUB_OUTPUT
            echo "ASSET_NAME=$ASSET_NAME" >> $env:GITHUB_OUTPUT
          }
        shell: pwsh
      
      # 8. Fertiges Paket zum Release hochladen
      - name: Lade fertiges Paket hoch (via GitHub CLI)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} ${{ steps.package.outputs.ASSET_PATH }} --name "${{ steps.package.outputs.ASSET_NAME }}" --clobber

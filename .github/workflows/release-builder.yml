name: Baue Windows & macOS Version

on:
  release:
    types: [published]

jobs:
  build:
    permissions:
      contents: write

    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      # 1. Code herunterladen
      - name: Lade den Quellcode herunter
        uses: actions/checkout@v4

      # 2. Python einrichten
      - name: Installiere Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. Python-Pakete installieren
      - name: Installiere Python-Pakete
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Windows: Inno Setup & Nmap vorbereiten
      - name: Windows-spezifische Vorbereitungen
        if: runner.os == 'Windows'
        run: |
          # Installiere Inno Setup, falls noch nicht geschehen
          choco install innosetup -y --force
          
          $NMAP_URL = "https://nmap.org/dist/nmap-7.95-setup.exe"
          $NMAP_INSTALLER_PATH = "nmap-setup.exe"
          
          echo "Lade Nmap von $NMAP_URL herunter..."
          Invoke-WebRequest -Uri $NMAP_URL -OutFile $NMAP_INSTALLER_PATH
          
          # --- DER NEUE, VERBESSERTE INSTALLATIONSBEFEHL ---
          echo "Installiere Nmap im Silent Mode mit expliziten Komponenten..."
          # /S                 = Silent Mode
          # /D=C:\Nmap         = Installiere es in einen einfachen Pfad, um Probleme mit Leerzeichen zu vermeiden
          # /currentuser       = Macht die Installation manchmal zuverlässiger in automatisierten Umgebungen
          $INSTALL_ARGS = '/S /D=C:\Nmap'
          Start-Process -FilePath $NMAP_INSTALLER_PATH -ArgumentList $INSTALL_ARGS -Wait -PassThru
          
          echo "Nmap-Installation abgeschlossen. Überprüfe den Erfolg..."

          # Wir suchen jetzt im neuen, einfachen Pfad
          $NMAP_EXE_PATH = "C:\Nmap\nmap.exe"
          if (-not (Test-Path $NMAP_EXE_PATH)) {
            echo "FEHLER: Nmap wurde nicht erfolgreich installiert. Die Datei $NMAP_EXE_PATH wurde nicht gefunden."
            # Wir listen den Inhalt von C:\ auf, um zu sehen, was schiefgelaufen ist
            Get-ChildItem -Path C:\ | ForEach-Object { Write-Host $_.Name }
            exit 1
          }
          echo "Nmap erfolgreich unter $NMAP_EXE_PATH gefunden."

          # Der Rest bleibt gleich, aber wir kopieren vom neuen Pfad
          New-Item -ItemType Directory -Force -Path "dependencies/nmap_unpacked"
          echo "Kopiere installierte Nmap-Dateien..."
          Copy-Item -Path "C:\Nmap\*" -Destination "dependencies\nmap_unpacked" -Recurse
        shell: pwsh
      # 5. macOS: Nmap installieren
      - name: macOS-spezifische Vorbereitungen
        if: runner.os == 'macOS'
        run: brew install nmap

      # 6. Anwendung mit PyInstaller bauen
      - name: Führe das PyInstaller Build-Skript aus
        run: python main.py --build

      # 7. Windows Installer mit Inno Setup erstellen
      - name: Erstelle Windows Installer
        if: runner.os == 'Windows'
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\iscc.exe" "setup.iss"
        shell: pwsh

       # 8. Ergebnis verpacken und Outputs festlegen
      - name: Ergebnis verpacken und Outputs festlegen
        id: package
        run: |
          if ("${{ runner.os }}" -eq "Windows") {
            $SOURCE_PATH = "Output/Netzwerk-Scanner-Pro-Setup.exe"
            $FINAL_NAME = "Netzwerk-Scanner-Pro-Windows-Setup.exe"
            # Benenne die Datei um, damit sie einen besseren Namen im Release hat
            mv $SOURCE_PATH "Output/$FINAL_NAME"
            echo "ASSET_PATH=Output/$FINAL_NAME" >> $env:GITHUB_OUTPUT
          }
          else {
            $ASSET_NAME = "Netzwerk-Scanner-Pro-macOS.zip"
            cd dist
            zip -r ../$ASSET_NAME "Netzwerk-Scanner Pro.app"
            cd ..
            echo "ASSET_PATH=$ASSET_NAME" >> $env:GITHUB_OUTPUT
          }
        shell: pwsh
      # 9. Fertiges Paket zum Release hochladen
            # 9. Fertiges Paket zum Release hochladen
      - name: Lade fertiges Paket hoch (via GitHub CLI)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} ${{ steps.package.outputs.ASSET_PATH }} --clobber
